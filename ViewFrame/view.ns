
printDepth := 9999;
printLength := 9999;
printBinaries := 1;
printUnique := 1;

pkg := ReadPkg(LoadBinary("/Users/matt/Desktop/Newton/NewtonDev/NewtonDev.1/Sample Code/System Services/PeriodicElements-1/PeriodicElements.pkg"));
p(pkg);
bin := MakePkg(pkg);
p("Pkg.");
SaveBinary(
    bin,
    "/Users/matt/Desktop/Newton/NewtonDev/NewtonDev.1/Sample Code/System Services/PeriodicElements-1/PeriodicElements.pkg.1"
);
p("Done.");

exit();

/*
p(3*3);


global EnsureInternal(obj) begin return obj; end;
global vars := {extras: []};
vars.vars := vars;
global Notify(obj) begin end;
GetRoot().Notify := func(a,b,c) begin end;

local result := ReadPkg(LoadBinary("/Users/matt/dev/newt64/ViewFrame/ViewFrame.pkg"));
if (result=NIL) then begin
  p("Failed to read ViewFrame.pkg");
end;

global ViewFramePackage := result;
global routing:=ViewFramePackage.parts[0].data;
routing:InstallScript(routing);
GetRoot().|ViewFrame:JRH| := routing.theForm;
RemoveSlot(GetGlobals(), 'routing);
RemoveSlot(GetGlobals(), 'ViewFramePackage);

local viewFrameDecompiler := ReadPkg(LoadBinary("/Users/matt/dev/newt64/ViewFrame/VF+Function.pkg"));
if (viewFrameDecompiler=NIL) then begin
  p("Failed to read VF+Function.pkg");
end;

global VFFunctionPackage := viewFrameDecompiler;
global routing:=VFFunctionPackage.parts[0].data;
routing:InstallScript(routing);
global decompiler:=|ViewFrame:JRH|.|VF+Function:JRH|[0].DisplayObject.literals[4];
print(decompiler:nosemi("If you can see this, things are sort of working!;") & "\n");
RemoveSlot(GetGlobals(), 'routing);
RemoveSlot(GetGlobals(), 'VFFunctionPackage);

decompiler.oneliner := GetRoot().|ViewFrame:JRH|.oneliner;
decompiler.StdObjDesc := GetRoot().|ViewFrame:JRH|.StdObjDesc;
decompiler.weakling := nil;


local ref := func() begin
    print("test");
    return 3*3;
end;

p("Testing");

printDepth := 3;
printLength := 9999;
printBinaries := true;

local src := decompiler:decompile(ref);
p(decompiler);

p("Done!");
p(src);

    newtRef decompiler = NcGetSlot(NcGetGlobals(), NSSYM(decompiler));
    if (NewtRefIsNotNIL(decompiler)) {
      newtRef decompiledString = NcSend(decompiler, NSSYM(decompile), false, 1, ref);
      if (NewtRefIsString(decompiledString) == true) {
        description = [[NSString stringWithCString:NewtRefToString(decompiledString)
                                   encoding:NSUTF8StringEncoding] stringByReplacingOccurrencesOfString:@"\r" withString:@"\n"];
        type = @"string";
      }
      else {
        NSLog(@"Decompiler failed. Returned %i (type %i)", decompiledString, NewtGetRefType(decompiledString, true));
      }
    }
  }
*/



printDepth := 9999;
printLength := 9999;
printBinaries := 1;

constant kNotifyAlert := 3;

p("A");

DefGlobalFn('AddStepForm, func(p, c)
begin
    if not p.stepChildren exists then
        p.stepChildren := [];
    AddArraySlot(p.stepChildren, c);
    return nil;
end);

DefGlobalFn('StepDeclare, func(p, c, s)
begin
    if not p.stepAllocateContext exists then
        p.stepAllocateContext := [];
    AddArraySlot(p.stepAllocateContext, s);
    AddArraySlot(p.stepAllocateContext, c);
    return nil;
end);



// Text of project EinsteinPrefs written on 5/23/20 at 5:20 PM


// Beginning of file EinsteinGlue.ntkc
/*
DefConst('Einstein,

PP: Ill-placed Blank
{glue: {class: BinCFunction, code: <code>, numArgs: 1, offset: 0},

PP: Ill-placed Blank
version: {class: BinCFunction, code: <code>, numArgs: 1, offset: 36},

    Platform: {class: BinCFunction, code: <code>, numArgs: 2, offset: 16}
    }
);
*/
// End of file EinsteinGlue.ntkc
// Beginning of text file AppConstants.f
/*
constant kPrefFrame := {
       		_proto: protoFloatngo,

       		viewJustify: vjParentLeftH + vjParentTopV,

       		viewBounds: nil,

       		stepChildren: nil,

       		ReorientToScreen: ROM_DefRotateFunc,

       		viewSetupDoneScript: func()
       		begin
       		local myBounds := :LocalBox();
       		local prefBounds ;

       		foreach kid in :ChildViewFrames() do
       			if kid._proto = prefPanelProto then
       				prefBounds := kid:LocalBox() ;

       		if prefBounds AND myBounds.bottom < prefBounds.bottom then
       			SetValue(self, 'viewBounds,	RelBounds(0, 0, myBounds.right, prefBounds.bottom)) ;
       		end
       		};

p("B");

constant kPrefsFrame := 		// default prefs settings
	{tag: kAppString,
	 version: 1,
	 startWithSoud: nil,
	 onePrefOnly: true,
	 philospherIndex: 0
	 };

constant kIconPrefSpace := 25;
constant kNSErrUndefinedMethod := -48809;
constant kNSErrNotASymbol      := -48410;

p("C");

// philisophical constants
constant kPhilPicker :=
				["None", 'pickSeparator, "Plato", "Aristotle",
				"Descartes", "Mill", "Tsunemoto", "Nietzsche",
				"Marx", "Wittgenstien", "Heidegger", "Russell", "Popper", "Dr. Llama"] ;

constant kSerialDriverMax           := 5;
constant kTcpServerSerialDriverTag  := 5;
constant kTcpClientSerialDriverTag  := 4;
constant kBasiliskIISerialDriverTag	:= 3;
constant kPtySerialDriverTag        := 2;
constant kPipesSerialDriverTag      := 1;
constant kNullSerialDriverTag       := 0;

//  - for testing purposes, set this to 1 to modify the Modem port instead of our debug connection
constant kExtr			            := 0;

// start sound
//r := OpenResFileX("EinsteinPreferences.rsrc");
//DefConst('kPrefsDefaultIcon, GetPictAsBits("defaultPrefIcon", nil));
//CloseResFileX(r) ;

// End of text file AppConstants.f
// Beginning of file EinsteinAppPrefs

// Before Script for _v385_0

p("D");

_v385_0 :=
    {viewBounds: {left: 0, top: 0, right: 0, bottom: 160},
     height: 160,
     icon: nil,
     prefsEntry: nil,
     viewSetupFormScript:
       func()
       begin
       	inherited:?viewSetupFormScript();
       end,
     overview: "About Einstein Preferences",
     text: "\"About Einstein Preferences\"",
     _proto: @385 // protoPrefsRollItem
    };

p("D1");

_v385_0_v218_0 :=
    {text: "",
     viewBounds: {left: 22, top: 24, right: 220, bottom: 148},
     viewSetupFormScript:
       // be sure to call inherited:?ViewSetupFormScript()
       func()
       begin

       	local glue := call Einstein.Glue with (nil);
       	local ver := call Einstein.Version with (nil);

       	self.text :=
       	"Einstein Preferences Version 1.2\n" &
       	"NTK Glue Version " & glue & "\n" &
       	"Einstein TNewt Version " & ver & "\n" &
       	"\n" &
       	"(c) 2020, Matthias Melcher\n" &
       	"www.elektriktrick.com/Newton.html"
       	;

       	inherited:?ViewSetupFormScript();
       end,
     viewJustify: 0,
     _proto: @218 // protoStaticText
    };

p("D2");

AddStepForm(_v385_0, _v385_0_v218_0);



constant |layout_EinsteinAppPrefs| := _v385_0;
// End of file EinsteinAppPrefs
// Beginning of file EinsteinPhilPrefs

// Before Script for _v385_0
// Copyright ï¿½ 1993-6 Apple Computer, Inc. All rights reserved.


_v385_0 :=
    {viewBounds: {left: 0, top: 0, right: 0, bottom: 35},
     height: 35,
     overview: "Philisophical Leaning",
     text: "Philisophical Leaning",
     icon: nil,
     prefsEntry: nil,
     viewSetupFormScript:
       func()
       begin
       	prefsEntry := GetAppPrefs(kAppSymbol, kPrefsFrame);
       	inherited:?viewSetupFormScript();
       end,
     _proto: @385 // protoPrefsRollItem
    };

_v385_0_v190_0 :=
    {viewBounds: {left: 25, top: 17, right: 207, bottom: 39},
     labelCommands: kPhilPicker,
     text: "Philosopher",
     textSetup:
       func()
       begin
       	labelCommands[prefsEntry.philosopherIndex] ;
       end,
     labelActionScript:
       func(cmd)
       begin
       	prefsEntry.philosopherIndex := cmd;
       	EntryChange(prefsEntry);
       	GetRoot().(kAppSymbol):RevisePhilosophy();
       end,
     _proto: @190 // protoLabelPicker
    };
AddStepForm(_v385_0, _v385_0_v190_0);


p("F");


constant |layout_EinsteinPhilPrefs| := _v385_0;
// End of file EinsteinPhilPrefs
// Beginning of file EinsteinSerialPrefs

// Before Script for wSerialPrefs

wSerialPrefs :=
    {viewBounds: {left: 0, top: 0, right: 0, bottom: 140},
     height: 140,
     overview: "Serial Port Driver",
     text: "\"Serial Port Driver\""
     ,
     icon: nil,
     prefsEntry: nil,
     viewSetupFormScript:
       //
       //  This function is called at the very beginning when this view is
       //  requested but not shown yet.
       //
       func()
       begin
       	//
       	//  - Check compatibility of this panel with their version of EInstein
       	//    (we already checked that we are running on Einstein in EInsteinPrefs.lyt)
       	//
       	local glue := call Einstein.Glue with (nil);
       	local ver := call Einstein.Version with (nil);

       	//call Einstein.Platform with ('print, [
       	//	"Opening serial port prefrences",
       	//	"  Glue version is " & glue,
       	//	"  Einstein Platform Version is " & ver & " (expecting 5 or higher)."
       	//]);

       	//  - all drivers and options for all Einstein serial ports
           //    (this is mainly to avoid calling Einstein all the time to retrieve data)
           self.epCurrentDriverArray := Array( 4, nil );

       	//
       	//  - Read the current setting of the serial port for quick access while this panel is open
       	//
       	for i:=0 to 3 do
       		self.epCurrentDriverArray[i] := call Einstein.Platform with ('GetSerialPortDriverAndOptions, i);

       	//call Einstein.Platform with ('print, [
       	//	"Initial settings on serial ports:",
       	//	epCurrentDriverArray
       	//]);

       	inherited:?viewSetupFormScript();
       end,
     viewSetupDoneScript:
       //
       //  This function is called afte all the UI elements are created
       //  but before they are shown
       //
       func()
       begin
       	//  - the wDriver view will call its own script to update its content

       	//  - update all options views to represent the current driver settings
       	:epUpdateOptionsView();
       end,
     epSetDriverAndOptions:
       //
       //  This is called whenever something in the UI changed. The user
       //  may have selected a new driver in wDriver or changed any of
       //  the options in wServer or wPort
       //
       func()
       begin
       	call Einstein.Platform with ('print, "epSetDriverAndOptions");

       	local oldDriverId := epCurrentDriverArray[kExtr].driver;
       	local newDriverId := wDriver.epDriverId;

       	call Einstein.Platform with ('print, "DriverIDs" && oldDriverId && newDriverID );

       	//  - Check if the user wants an entirely new driver or just changed options
       	if (newDriverId<>oldDriverId) then begin

       		call Einstein.Platform with ('print, [ "BEFORE: ", epCurrentDriverArray[kExtr] ] );

       		//  - Tell EInstein to generate a new driver but don;t set any options
       		call Einstein.Platform with (
       			'SetSerialPortDriverAndOptions,
       			{ port: kExtr, driver: newDriverId }
       		);

       		//  - And read the result of that operation back into teh current driver slot
       		epCurrentDriverArray[kExtr] :=
       			call Einstein.Platform with ('GetSerialPortDriverAndOptions, kExtr);

       		call Einstein.Platform with ('print, [ "AFTER: ", epCurrentDriverArray[kExtr] ] );

       		//  - Update the view to represent the new driver settings
       		:epUpdateOptionsView();

       	end else begin

       		//  - The driver remained the same, so resend options that apply
       		local opt := clone( epCurrentDriverArray[kExtr] );
       		opt.port := kExtr;

       		//  - Update the server slot if we have one
       		if (HasSlot(opt, 'tcpServer)) then
       			opt.tcpServer := wServer.entryLine.text;

       		//  - Update the port slot if we have one
       		if (HasSlot(opt, 'tcpPort)) then
       			opt.tcpPort := wPort.entryLine.text;

       		//  - now tell the existing driver to reconfigure
       		call Einstein.Platform with ('SetSerialPortDriverAndOptions, opt);
       		call Einstein.Platform with ('print, [ "EINSTEIN: ", epCurrentDriverArray[kExtr] ] );

       	end;

       	call Einstein.Platform with ('print, "epSetDriverAndOptions done.");
       end,
     epDontUpdate:
       // set this to true to avoid recursions into the update function
       nil,
     epUpdateOptionsView:
       //
       //  Update the visibility and values of all options views
       //
       func()
       begin
       	//  - Use the stored current settings
       	local opt := epCurrentDriverArray[kExtr];

       	call Einstein.Platform with ( 'print, [ "epUpdateOptionsView", opt] );

       	//  - Avoid recursion into this function when changing views
       	self.epDontUpdate := true;

       	//  - Check if the options contain a tcp server slot and show the input field if so
       	if hasSlot(opt, 'tcpServer) then begin
       		SetValue( self.wServer.entryLine, 'text, opt.tcpServer );
       		self.wServer:show();
       	end else
       		self.wServer:hide();

       	//  - Check if the options contain a tcp port slot and show the input field if so
       	if hasSlot(opt, 'tcpPort) then begin
       		SetValue( self.wPort.entryLine, 'text, opt.tcpPort );
       		self.wPort:show();
       	end else
       		self.wPort:hide();

       	//  - Edn of recursion protection
       	self.epDontUpdate := nil;

       end,
     viewQuitScript:
       // must return the value of inherited:?ViewQuitScript()
       func()
       begin

       	inherited:?ViewQuitScript();

       	//  - just to make sure that we *really* set the changes we made
       	:epSetDriverAndOptions();

       	//  - do we need this to return data to the pool?
       	self.epCurrentDriverArray := nil;

       end,
     viewIdleScript:
       func()
       begin

       	//  - This is called one second after the last change to any of the etxt input fields
       	:epSetDriverAndOptions();

       	nil;	// Return the number of milliseconds to delay or nil to end idling.
       end,
     debug: "wSerialPrefs",
     _proto: @385 // protoPrefsRollItem
    };

p("G");

wDriver :=
    {viewBounds: {left: 33, top: 27, right: 199, bottom: 49},
     labelCommands: nil,
     text: "Driver",
     textSetup:
       func()
       begin
       	local names := call Einstein.Platform with ('GetSerialPortDriverNames, nil);
       	local cfg := call Einstein.Platform with ('GetSerialPortDriverAndOptions, kExtr);
       	call Einstein.Platform with ('print, ['Cfg, cfg]);
       	self.epDriverId := cfg.driver;
       	local idx := cfg.driver;
       	if idx>=0 and idx<=kSerialDriverMax then
       		labelCommands[driversLUT[idx]];
       end,
     labelActionScript:
       //
       //  This is called whenever the user picks a new driver from the dropdown menu.
       func(cmd)
       begin

       	//  - convert the value returned from the dropdown into a driver index and save it for later use
       	self.epDriverId := menuLUT[cmd];

       	//	- tell the serial port view to change the driver and update the option views
       	if (epDontUpdate=nil) then
       		:Parent():epSetDriverAndOptions();

       end,
     viewSetupFormScript:
       // be sure to call inherited:?ViewSetupFormScript()
       func()
       begin
           local driversMenu := [];
           self.driversLUT := [ 0, 0, 0, 0, 0, 0, 0 ];
           self.menuLUT := [ 0, 0, 0, 0, 0, 0, 0 ];
       	local names := call EInstein.Platform with ('GetSerialPortDriverNames, NIL);
       	call Einstein.Platform with ('print, ['names, names]);
       	local drivers := call Einstein.Platform with ('GetSerialPortDriverList, kExtr);
       	call Einstein.Platform with ('print, ['drivers, drivers]);
       	foreach d in drivers do begin
       		local ix := Length(driversMenu);
       	    driversLUT[d] := ix;
       	    menuLUT[ix] := d;
       		AddArraySlot(driversMenu, names[d]);
       		if (d=0) then
       			AddArraySlot(driversMenu, 'pickSeparator);
       	end;
       	call Einstein.Platform with ('print, [driversLUT, menuLUT, driversMenu]);
       	self.labelCommands := driversMenu;
       	inherited:?ViewSetupFormScript();
       end,
     epDriverId: 0,
     debug: "wDriver",
     _proto: @190 // protoLabelPicker
    };
AddStepForm(wSerialPrefs, wDriver);
StepDeclare(wSerialPrefs, wDriver, 'wDriver);

p("H");


wServer :=
    {viewBounds: {left: 8, top: 48, right: 200, bottom: 80},
     label: "Server",
     text: nil,
     labelCommands:
       [
       	"127.0.0.1",  // default value
       	// , 'pickSeparator
       	// TODO: the last 6 picked ports could be displayed here
       ]
       ,
     viewFlags: 64001,
     entryFlags: 64001,
     textChanged:
       //
       //  This is called when text chages.
       //  NOTE: "self" is set to wServer.entryLine!
       //
       func()
       begin

       	//  - Make sure taht we are not in a recursion
       	if (epDontUpdate=nil) then begin

       		//  - start or restart a timer so that typing in this field will not
       		//    cause a refresh with every keystroke.
       		//    This calls wSerialPres.viewIdleScript after a while
       		:Parent():Parent():SetupIdle(1000);

       	end;

       end,
     debug: "wServer",
     _proto: @189 // protoLabelInputLine
    };
AddStepForm(wSerialPrefs, wServer);
StepDeclare(wSerialPrefs, wServer, 'wServer);

p("I");


wPort :=
    {viewBounds: {left: 8, top: 80, right: 200, bottom: 112},
     label: "Port",
     text: nil,
     labelCommands:
       [
       	"3679"	// default value
       	// , 'pickSeparator
       	// TODO: the last 6 picked ports could be displayed here
       ],
     viewFlags: 8705,
     entryFlags: 10753,
     textChanged:
       //
       //  This is called when text chages.
       //  NOTE: "self" is set to wPort.entryLine!
       //
       func()
       begin

       	//  - Make sure taht we are not in a recursion
       	if (epDontUpdate=nil) then begin

       		//  - start or restart a timer so that typing in this field will not
       		//    cause a refresh with every keystroke.
       		//    This calls wSerialPres.viewIdleScript after a while
       		:Parent():Parent():SetupIdle(1000);

       	end;

       end,
     debug: "wPort",
     _proto: @189 // protoLabelInputLine
    };
AddStepForm(wSerialPrefs, wPort);
StepDeclare(wSerialPrefs, wPort, 'wPort);


p("J");


constant |layout_EinsteinSerialPrefs| := wSerialPrefs;
// End of file EinsteinSerialPrefs
// Beginning of file EinsteinPrefs.lyt
*/
constant appWindow :=
    {viewBounds: {left: 0, top: 0, right: 224, bottom: 220},
     viewFlags: 548,
     viewJustify: 80,
/*
     viewQuitScript:
       func()
       begin
       	if openChild then
       		openChild:Close();
       	prefsEntry := nil;
       	inherited:?viewQuitScript();		// this method might be defined internally
       end,
     openChild: nil,
     prefItemsArray:
       // MUST provide this!
       // an array of protoPrefRollItem's that are the preference items

       [
        |layout_EinsteinSerialPrefs|, //GetLayout("EinsteinSerialPrefs"),
       	|layout_EinsteinAppPrefs| //GetLayout("EinsteinAppPrefs"),
       	//GetLayout("EinsteinPhilPrefs")
       ],
     OpenPref:
       func(prefPanel)
       begin
       	local item := BuildContext( kPrefFrame );

       	// pref panel will be attached to the root view, but want
       	// to center it inside the parent view or overview
       	item.viewBounds := RelBounds(:GlobalBox().left,
       		:GlobalBox().top + :LocalBox().bottom DIV 2 - prefPanel.height DIV 2,
       		:LocalBox().right, prefPanel.height) ;

       	item.stepChildren := item.viewChildren;
       	item.viewChildren := [prefPanel];
       	item.prefPanelProto := prefPanel ;

       	item:Open();
       	return item;
       end,
*/
     viewSetupFormScript:
       // be sure to call inherited:?ViewSetupFormScript()
       func()
       begin
/*
       	// Check if we are actually running on an Einstein Emulator
       	local eVers := call Einstein.Version with (nil);
       	if (eVers=-1) then
       	begin
*/
       		GetRoot():Notify(kNotifyAlert,
       			EnsureInternal("Einstein Preferences"),
       			EnsureInternal(
       				"No Einstein emulator detected.\r\r" &
       				"This application works only on " &
       				"Newton systems that are emulated " &
       				"with Einstein.\r\r" &
       				"www.github.com/pguyot/Einstein")
       		);
       		local this := self;
       		AddDeferredCall(func() this:close(), '[]);
/*
       	end;

       	if (eVers<5) then
       	begin
       		GetRoot():Notify(kNotifyMessage,
       			EnsureInternal("Einstein Preferences"),
       			EnsureInternal(
       				"This application was written for a newer version of Einstein.\r\r" &
       				"Some preference settings may not be supported.\r\r" &
       				"www.github.com/pguyot/Einstein")
       		);
       	end;

       	prefsEntry := GetAppPrefs(kAppSymbol, kPrefsFrame);
*/
       	inherited:?ViewSetupFormScript();
       end,
/*
     prefsEntry: nil,
*/
     debug: "appWindow",
     _proto: @180 // protoFloatNGo
    };

p("K");

/*
appWindow_v229_0 :=
    {viewBounds: {left: 14, top: 4, right: 94, bottom: 20},
     viewSetupFormScript:
       func()
       begin
       	if title then
       		self.title := title ;
       	else
       		self.title := defaultTitle ;

       	inherited:?viewSetupFormScript();		// this method is defined internally
       end,
     defaulttitle: "Preferences",
     title: "Einstein Prefs",
     _proto: @229 // protoTitle
    };
AddStepForm(appWindow, appWindow_v229_0);

p("L");


appWindow_v191_0 :=
    {viewBounds: {left: 0, top: 20, right: 0, bottom: -16},
     viewFlags: 517,
     viewJustify: 240,
     cursor:
       {
       	items: nil,

       	index: 0,

       	NumItems: func()
       		Length(items),

       	Entry: func()
       	begin
       		if index < Length(items) then
       		items[index];
       	end,

       	Next: func()
       		if index < Length(items)-1 then
       		begin
       			index := index + 1;
       			items[index];
       		end,

       	Move: func(delta)
       	begin
       		index := Min(Max(index + delta, 0), Length(items)-1) ;
       		items[index];
       	end,

       	Reset: func()
       		index := 0,

       	Clone: func()
       		Clone(self),

       	GetIndexEntry: func(theIndex)
       		items[theIndex],
       },
     selectIndent: 0,
     Abstract:

       func(pref,bbox)
       begin
       	[
       	MakeText(pref.overview, bbox.left + kIconPrefSpace, bbox.top, bbox.right, bbox.top + 11),
       	if pref.icon then
       		OffsetShape(MakeShape(pref.icon),
       			bbox.left + (kIconPrefSpace - pref.icon.bounds.right) DIV 2,
       			bbox.top + (kIconPrefSpace - pref.icon.bounds.bottom) DIV 2);
       	else
       		OffsetShape(
       			MakeShape(kPrefsDefaultIcon),
       				bbox.left + (kIconPrefSpace - kPrefsDefaultIcon.bounds.right) DIV 2,
       				bbox.top + kPrefsDefaultIcon.bounds.bottom DIV 2),
       	]
       end,
     HitItem:
       func(hitIndex, xcoord, ycoord)
       begin
       	// find the actual item hit
       	// i.e., compensate for any scrolling offset
       	local realIndex := hitIndex + topIndex;
       	if openChild then
       		openChild:Close();

       	openChild := :OpenPref(cursor:GetIndexEntry(realIndex));
       end,
     Scroller:
       func(dir)
       begin
       	local newIndex := Min(Max(topIndex + dir, 0), cursor:NumItems()-1);
       	local realDir := topIndex - newIndex ;

       	// can get called when the list is at the top or
       	// bottom, so check if we need to do real work
       	if realDir <> 0 then
       	begin
       		// update the index for the item at the top of the display
       		topIndex := newIndex ;

       		// let viewSetupChildrenScript do the work
       		:RedoChildren();
       	end ;
       end,
     topIndex:
       // index of the item that is currently at the
       // top of the displayed items
       0,
     viewSetupChildrenScript:
       // Required
       // use SetupAbstracts to setup the pictures shown
       func()
       begin
       	// can get called when a scroll occurs
       	// so clone off the cursor and move
       	// it so that the first item is the
       	// current top of the displayed items
       	local curs := cursor:Clone();

       	curs:Reset();
       	curs:Move(topIndex);
       	:SetupAbstracts(curs);
       end,
     viewSetupFormScript:
       func()
       begin
       	// only need to setup cursor if not already there
       	// i.e., viewSetupFormScript may get called multiple times
       	if IsReadOnly(cursor) then
       	begin
       		cursor := {_proto: cursor,
       					  items: prefItemsArray};
       	end ;
       end,
     nothingCheckable: true,
     autoDeselect: true,
     lineHeight: 16,
     _proto: @191 // clView

    };
AddStepForm(appWindow, appWindow_v191_0);



p("M");

constant |layout_EinsteinPrefs.lyt| := appWindow;
// End of file EinsteinPrefs.lyt

*/

constant app :=
{
	class: 'PackageHeader,
	type: 2021161080,
	pkg_version: 1,
	version: 1,
	copyright: "Copyright (c) 2020 Matthias Melcher. All rights reserved.",
	name: "Toast:MATTWM",
	flags: 33554432,
	parts: [
		{
			class: 'PackagePart,
			info: MakeBinaryFromHex("476C75652E6169664030783030303032323130", 'binary),
			flags: 129,
			type: 1718579821,
			data: {
				app: '|Toast:MATTWM|,
				text: "Toast",
				iconPro: {
					unhilited: {
						bounds: {
							left: 0,
							top: 0,
							right: 25,
							bottom: 26
						},
						bits: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC3000018C3F00018C0000018C000001FCFFC000F8FFC00000000000F8000001FC0000018C0000018C0000018C000001FCFFC000F8FFC00000000000000000000000000", 'bits),
						colorData: [
							{
								cbits: MakeBinaryFromHexcbits),
								bitDepth: 8
							},
							{
								cbits: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC3000018C3F00018C0000018C000001FCFFC000F8FFC00000000000F8000001FC0000018C0000018C0000018C000001FCFFC000F8FFC00000000000000000000000000", 'bits),
								bitDepth: 1
							}
						],
						mask: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC300001FC3F0001FC000001FC000001FCFFC000F8FFC00000000000F8000001FC000001FC000001FC000001FC000001FCFFC000F8FFC00000000000000000000000000", 'mask)
					},
					hilited: {
						bounds: {
							left: 0,
							top: 0,
							right: 25,
							bottom: 26
						},
						bits: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC3000018C3F00018C0000018C000001FCFFC000F8FFC00000000000F8000001FC0000018C0000018C0000018C000001FCFFC000F8FFC00000000000000000000000000", 'bits),
						colorData: [
							{
								cbits: MakeBinaryFromHexcbits),
								bitDepth: 8
							},
							{
								cbits: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC3000018C3F00018C0000018C000001FCFFC000F8FFC00000000000F8000001FC0000018C0000018C0000018C000001FCFFC000F8FFC00000000000000000000000000", 'bits),
								bitDepth: 1
							}
						],
						mask: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC300001FC3F0001FC000001FC000001FCFFC000F8FFC00000000000F8000001FC000001FC000001FC000001FC000001FCFFC000F8FFC00000000000000000000000000", 'mask)
					}
				},
				icon: {
					bits: MakeBinaryFromHex("000000000004000000000000001A001900000000000000000000F8000001800000018000000180000001F000000300000F8300001FC3000018C3F00018C0000018C000001FCFFC000F8FFC00000000000F8000001FC0000018C0000018C0000018C000001FCFFC000F8FFC00000000000000000000000000", 'bits),
					bounds: {
						left: 0,
						top: 0,
						right: 25,
						bottom: 26
					},
					mask: MakeBinaryFromHex("000000000004000000000000001A00190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 'bits)
				},

				theForm: appWindow,
/*
                InstallScript: func(partFrame)
                begin
                    //partFrame.removeFrame := (partFrame.theForm):NewtInstallScript(partFrame.theForm);
                end,
                RemoveScript: func(partFrame)
                begin
                    //(partFrame.removeFrame):NewtRemoveScript(removeFrame);
                end
                */
			}
		}
	]
};

p(app);

p("Done.");
pkg2 := MakePkg(app);
p("PKG2.");
SaveBinary(pkg2, "/Users/matt/dev/Einstein/test.pkg");
p("Written.");
pkg3 := ReadPkg(pkg2);
p(pkg3);
