/* Copyright:	(c) 2020, Matthias Melcher, all rights reserved. "Newton 2.2" Newton ByteCode File*/global bc := {    // generate a 1-byte or 3-byte bytecode instruction from two integers    MakeBytecode: func(a, b)        if b>6 then          return bOr( bOr( bAnd(a<<19, 0xF80000), 0x070000 ), bAnd(b, 0xFFFF) )        else          return bOr( bAnd(a<<19, 0xF80000), bAnd(b<<16, 0x070000) ),    // generate a 3-byte bytecode instruction from two integers    // TODO: or an integer and a symbol, used as a label    MakeBytecodePC: func(a, pc)        return bOr( bOr( bAnd(a<<19, 0xF80000), 0x070000 ), bAnd(pc, 0xFFFF) ),    Pop:            func() return :MakeBytecode(0, 0),    Dup:            func() return :MakeBytecode(0, 1),    Ret:            func() return :MakeBytecode(0, 2),    PushSelf:       func() return :MakeBytecode(0, 3),    SetLexScope:    func() return :MakeBytecode(0, 4),    IterNext:       func() return :MakeBytecode(0, 5),    IterDone:       func() return :MakeBytecode(0, 6),    PopHandlers:    func() return :MakeBytecode(0, 7),    Push:           func(lit)   return :MakeBytecode(3, lit),    PushConst:      func(sImm)  return :MakeBytecode(4, sImm), // FIXME: signed immediate!    CallGlobal:     func(nArgs) return :MakeBytecode(5, nArgs),    Invoke:         func(nArgs) return :MakeBytecode(6, nArgs),    Send:           func(nArgs) return :MakeBytecode(7, nArgs),    SendIfDef:      func(nArgs) return :MakeBytecode(8, nArgs),    Resend:         func(nArgs) return :MakeBytecode(9, nArgs),    ResendIfDef:    func(nArgs) return :MakeBytecode(10, nArgs),    Branch:         func(pc)    if IsSymbol(pc) then return [:MakeBytecodePC(11, 0), pc] else return :MakeBytecodePC(11, pc),    BranchIfTrue:   func(pc)    if IsSymbol(pc) then return [:MakeBytecodePC(12, 0), pc] else return :MakeBytecodePC(12, pc),    BranchIfFalse:  func(pc)    if IsSymbol(pc) then return [:MakeBytecodePC(13, 0), pc] else return :MakeBytecodePC(13, pc),    FindVar:        func(lit)   return :MakeBytecode(14, lit),    GetVar:         func(loc)   return :MakeBytecode(15, loc),    MakeFrame:      func(nSlts) return :MakeBytecode(16, nSlts),    MakeArray:      func(nVals) return :MakeBytecode(17, nVals),    GetPath:        func(flag)  return :MakeBytecode(18, flag),    SetPath:        func(flag)  return :MakeBytecode(19, flag),    SetVar:         func(loc)   return :MakeBytecode(20, loc),    FindAndSetVar:  func(lit)   return :MakeBytecode(21, lit),    IncrVar:        func(loc)   return :MakeBytecode(22, loc),    BranchIfNotDone:func(pc)    if IsSymbol(pc) then return [:MakeBytecodePC(23, 0), pc] else return :MakeBytecodePC(23, pc),    Add:            func()  return :MakeBytecode(24, 0),    Subtract:       func()  return :MakeBytecode(24, 1),    ARef:           func()  return :MakeBytecode(24, 2),    SetARef:        func()  return :MakeBytecode(24, 3),    Equals:         func()  return :MakeBytecode(24, 4),    LNot:           func()  return :MakeBytecode(24, 5), // logic    NotEquals:      func()  return :MakeBytecode(24, 6),    Multiply:       func()  return :MakeBytecode(24, 7),    Divide:         func()  return :MakeBytecode(24, 8),    DivInt:         func()  return :MakeBytecode(24, 9),    Less:           func()  return :MakeBytecode(24, 10),    Greater:        func()  return :MakeBytecode(24, 11),    GreaterOrEqual: func()  return :MakeBytecode(24, 12),    LessOrEqual:    func()  return :MakeBytecode(24, 13),    BAnd:           func()  return :MakeBytecode(24, 14),    BOr:            func()  return :MakeBytecode(24, 15),    BNot:           func()  return :MakeBytecode(24, 16),    NewIter:        func()  return :MakeBytecode(24, 17),    Length:         func()  return :MakeBytecode(24, 18),    Clone:          func()  return :MakeBytecode(24, 19),    SetClass:       func()  return :MakeBytecode(24, 20),    AddSlot:        func()  return :MakeBytecode(24, 21),    Stringer:       func()  return :MakeBytecode(24, 22),    HasPath:        func()  return :MakeBytecode(24, 23),    ClassOf:        func()  return :MakeBytecode(24, 24),    NewHandlers:    func(nEx)   return :MakeBytecode(25, nEx),};