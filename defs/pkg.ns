
printDepth := 9999;
printLength := 9999;
printBinaries := 1;
printUnique := 1;

constant bc := {
    // generate a 1-byte or 3-byte bytecode instruction from two integers
    MakeBytecode: func(a, b)
        if b>6 then
          return bOr( bOr( bAnd(a<<19, 0xF80000), 0x070000 ), bAnd(b, 0xFFFF) )
        else
          return bOr( bAnd(a<<19, 0xF80000), bAnd(b<<16, 0x070000) ),
    // generate a 3-byte bytecode instruction from two integers
    // TODO: or an integer and a symbol, used as a label
    MakeBytecodePC: func(a, pc)
        return bOr( bOr( bAnd(a<<19, 0xF80000), 0x070000 ), bAnd(b, 0xFFFF) ),
    Pop:            func() return :MakeBytecode(0, 0),
    Dup:            func() return :MakeBytecode(0, 1),
    Ret:            func() return :MakeBytecode(0, 2),
    PushSelf:       func() return :MakeBytecode(0, 3),
    SetLexScope:    func() return :MakeBytecode(0, 4),
    IterNext:       func() return :MakeBytecode(0, 5),
    IterDone:       func() return :MakeBytecode(0, 6),
    PopHandlers:    func() return :MakeBytecode(0, 7),
    Push:           func(lit)   return :MakeBytecode(3, lit),
    PushConst:      func(sImm)  return :MakeBytecode(4, sImm), // FIXME: signed immediate!
    CallGlobal:     func(nArgs) return :MakeBytecode(5, nArgs),
    Invoke:         func(nArgs) return :MakeBytecode(6, nArgs),
    Send:           func(nArgs) return :MakeBytecode(7, nArgs),
    SendIfDef:      func(nArgs) return :MakeBytecode(8, nArgs),
    Resend:         func(nArgs) return :MakeBytecode(9, nArgs),
    ResendIfDef:    func(nArgs) return :MakeBytecode(10, nArgs),
    Branch:         func(pc)    return :MakeBytecode(11, pc), // FIXME: allow sybols!
    BranchIfTrue:   func(pc)    return :MakeBytecode(12, pc), // FIXME: allow sybols!
    BranchIfFalse:  func(pc)    return :MakeBytecode(13, pc), // FIXME: allow sybols!
    FindVar:        func(lit)   return :MakeBytecode(14, lit),
    GetVar:         func(loc)   return :MakeBytecode(15, loc),
    MakeFrame:      func(nSlts) return :MakeBytecode(16, nSlts),
    MakeArray:      func(nVals) return :MakeBytecode(17, nVals),
    GetPath:        func(flag)  return :MakeBytecode(18, flag),
    SetPath:        func(flag)  return :MakeBytecode(19, flag),
    SetVar:         func(loc)   return :MakeBytecode(20, loc),
    FindAndSetVar:  func(lit)   return :MakeBytecode(21, lit),
    IncrVar:        func(loc)   return :MakeBytecode(22, loc),
    BranchIfNotDone:func(pc)    return :MakeBytecode(23, pc), // FIXME: allow sybols!
    Add:            func()  return :MakeBytecode(24, 0),
    Subtract:       func()  return :MakeBytecode(24, 1),
    ARef:           func()  return :MakeBytecode(24, 2),
    SetARef:        func()  return :MakeBytecode(24, 3),
    Equals:         func()  return :MakeBytecode(24, 4),
    LNot:           func()  return :MakeBytecode(24, 5), // logic
    NotEquals:      func()  return :MakeBytecode(24, 6),
    Multiply:       func()  return :MakeBytecode(24, 7),
    Divide:         func()  return :MakeBytecode(24, 8),
    DivInt:         func()  return :MakeBytecode(24, 9),
    Less:           func()  return :MakeBytecode(24, 10),
    Greater:        func()  return :MakeBytecode(24, 11),
    GreaterOrEqual: func()  return :MakeBytecode(24, 12),
    LessOrEqual:    func()  return :MakeBytecode(24, 13),
    BAnd:           func()  return :MakeBytecode(24, 14),
    BOr:            func()  return :MakeBytecode(24, 15),
    BNot:           func()  return :MakeBytecode(24, 16),
    NewIter:        func()  return :MakeBytecode(24, 17),
    Length:         func()  return :MakeBytecode(24, 18),
    Clone:          func()  return :MakeBytecode(24, 19),
    SetClass:       func()  return :MakeBytecode(24, 20),
    AddSlot:        func()  return :MakeBytecode(24, 21),
    Stringer:       func()  return :MakeBytecode(24, 22),
    HasPath:        func()  return :MakeBytecode(24, 23),
    ClassOf:        func()  return :MakeBytecode(24, 24),
    NewHandlers:    func(nEx)   return :MakeBytecode(25, nEx),
};


p("start...");

constant src :=
{
    class: 'PackageHeader,
    type: 2021161080,
    pkg_version: 1,
    version: 1,
    copyright: "Copyright \uc2a9\u1995 Apple Computer, Inc.  All rights reserved.",
    name: "PeriodicElements:PIEDTS",
    flags: 33554432,
    parts: [
        {
            class: 'PackagePart,
            info: MakeBinaryFromHex("41204E6577746F6E20546F6F6C6B6974206170706C69636174696F6E", 'binary),
            flags: 129,
            type: 1718579821,
            align: 4,
            data: {
                app: '|PeriodicElements:PIEDTS|,
                text: "Periodic",
                icon: {
                    mask: MakeBinaryFromHex("000000000004000000000000001B0018000000000000000000001C0000003F0000003F001FFF7F003FFF7E003FFFFE003FFFFC003FFFFC003FFFF8003FFFF8003FFFF0003FFFF0003FFFE0003FFFE0003FFFC0003FFFC0003FFF80003FFF00003FFF80003FFF80003FFF80001FFF00001FFF00000FFE000000000000", 'mask),
                    bits: MakeBinaryFromHex("000000000004000000000000001B0018000000000000000000001C0000003F00000033001FFF7B003FFF6E003000CE0037FCCC0037FD9C0034059800355338003403300035567000340660003554E000340CC000354FC000340B8000360F000037FE800037FD8000300B8000180300001FFF00000FFE000000000000", 'bits),
                    bounds: {
                        left: 0,
                        top: 0,
                        right: 24,
                        bottom: 27
                    }
                },
                theForm: {
                    title: "PeriodicElements",
                    viewBounds: {
                        left: 0,
                        top: 10,
                        right: 220,
                        bottom: 245
                    },
                    viewFormat: 83951953,
                    stepChildren: [
                        stepChildren:
                        {
                            buttonClickScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 27 000B */ bc:PushConst(11),
                                    /*   3: 18      */ bc:Push(0),
                                    /*   4: 19      */ bc:Push(1),
                                    /*   5: 1A      */ bc:Push(2),
                                    /*   6: 1B      */ bc:Push(3),
                                    /*   7: 04      */ bc:SetLexScope(),
                                    /*   8: 1C      */ bc:Push(4),
                                    /*   9: 85      */ bc:MakeFrame(5),
                                    /*  10: A3      */ bc:SetVar(3),
                                    /*  11: 75      */ bc:FindVar(5),
                                    /*  12: C5      */ bc:LNot(),
                                    /*  13: 6F 0014 */ bc:BranchIfFalse(20),
                                    /*  16: 7B      */ bc:GetVar(3),
                                    /*  17: 1E      */ bc:Push(6),
                                    /*  18: 29      */ bc:CallGlobal(1),
                                    /*  19: AD      */ bc:FindAndSetVar(5),
                                    /*  20: 75      */ bc:FindVar(5),
                                    /*  21: 1F 0007 */ bc:Push(7),
                                    /*  24: 38      */ bc:Send(0),
                                    /*  25: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    "Periodic",
                                    '|PeriodicElements:PIEDTS|,
                                    "Auto Beep",
                                    {
                                        class: $\s0003,
                                        instructions: MakeBinaryFromBC( [
                                            instructions:
                                            /*   0: 70      */ bc:FindVar(0),
                                            /*   1: 19      */ bc:Push(1),
                                            /*   2: 22      */ bc:PushConst(2),
                                            /*   3: 1A      */ bc:Push(2),
                                            /*   4: 2B      */ bc:CallGlobal(3),
                                            /*   5: 02      */ bc:Ret()
                                        ] ),
                                        literals: [
                                            literals:
                                            'base,
                                            'myEditor,
                                            'SetValue
                                        ],
                                        argFrame: {
                                            _nextArgFrame: NIL,
                                            _parent: NIL,
                                            _implementor: 0
                                        },
                                        numArgs: 0,
                                        DebuggerInfo: NIL
                                    },
                                    [
                                        6:
                                        NIL,
                                        '_proto,
                                        'ownerName,
                                        'ownerSymbol,
                                        'title,
                                        'viewQuitScript
                                    ],
                                    'myEditor,
                                    'BuildContext,
                                    'Open
                                ],
                                argFrame: NIL,
                                numArgs: 65536,
                                DebuggerInfo: [
                                    dbg1:
                                    0,
                                    'editor
                                ]
                            },
                            text: "Auto Beep Editor",
                            viewBounds: {
                                left: 58,
                                top: 34,
                                right: 166,
                                bottom: 54
                            },
                            _proto: @226,
                            debug: "editAlarms"
                        },
                        {
                            text: "Static Text",
                            viewBounds: {
                                left: 24,
                                top: 128,
                                right: 192,
                                bottom: 152
                            },
                            viewSetupDoneScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 24      */ bc:PushConst(4),
                                    /*   1: 03      */ bc:PushSelf(),
                                    /*   2: 18      */ bc:Push(0),
                                    /*   3: 39      */ bc:Send(1),
                                    /*   4: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'SetupIdle
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            viewIdleScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 03      */ bc:PushSelf(),
                                    /*   1: 18      */ bc:Push(0),
                                    /*   2: 19      */ bc:Push(1),
                                    /*   3: 1A      */ bc:Push(2),
                                    /*   4: 1B      */ bc:Push(3),
                                    /*   5: 28      */ bc:CallGlobal(0),
                                    /*   6: 1C      */ bc:Push(4),
                                    /*   7: 29      */ bc:CallGlobal(1),
                                    /*   8: 1D      */ bc:Push(5),
                                    /*   9: 27 0286 */ bc:PushConst(646),
                                    /*  12: 1E      */ bc:Push(6),
                                    /*  13: 28      */ bc:CallGlobal(0),
                                    /*  14: 27 00F0 */ bc:PushConst(240),
                                    /*  17: 1F 0007 */ bc:Push(7),
                                    /*  20: 2A      */ bc:CallGlobal(2),
                                    /*  21: 27 0296 */ bc:PushConst(662),
                                    /*  24: 1F 0008 */ bc:Push(8),
                                    /*  27: 8F 0007 */ bc:MakeArray(7),
                                    /*  30: C7 0016 */ bc:Stringer(),
                                    /*  33: 1F 0009 */ bc:Push(9),
                                    /*  36: 2B      */ bc:CallGlobal(3),
                                    /*  37: 00      */ bc:Pop(),
                                    /*  38: 27 07D0 */ bc:PushConst(2000),
                                    /*  41: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'text,
                                    "It is now",
                                    " ",
                                    'Time,
                                    'DateNTime,
                                    " ",
                                    'TimeInSeconds,
                                    '|mod|,
                                    'array,
                                    'SetValue
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            viewJustify: 8388610,
                            _proto: @218,
                            debug: "currentDate"
                        },
                        ref00734501 := {
                            text: "<no alarms reported>",
                            viewBounds: {
                                left: 8,
                                top: 64,
                                right: 216,
                                bottom: 88
                            },
                            _proto: @218,
                            debug: "lastReported",
                            preAllocatedContext: 'lastReported
                        },
                        {
                            buttonClickScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 18      */ bc:Push(0),
                                    /*   1: 28      */ bc:CallGlobal(0),
                                    /*   2: 27 1680 */ bc:PushConst(5760),
                                    /*   5: C1      */ bc:Subtract(),
                                    /*   6: 19      */ bc:Push(1),
                                    /*   7: 29      */ bc:CallGlobal(1),
                                    /*   8: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'Time,
                                    'SetTime
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            text: "Jump -1 Day",
                            viewBounds: {
                                left: 18,
                                top: 162,
                                right: 102,
                                bottom: 182
                            },
                            _proto: @226,
                            debug: "jumpBack"
                        },
                        {
                            buttonClickScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 18      */ bc:Push(0),
                                    /*   1: 28      */ bc:CallGlobal(0),
                                    /*   2: 27 1680 */ bc:PushConst(5760),
                                    /*   5: C0      */ bc:Add(),
                                    /*   6: 19      */ bc:Push(1),
                                    /*   7: 29      */ bc:CallGlobal(1),
                                    /*   8: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'Time,
                                    'SetTime
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            text: "Jump 1 Day",
                            viewBounds: {
                                left: 122,
                                top: 162,
                                right: 206,
                                bottom: 182
                            },
                            _proto: @226,
                            debug: "jumpForward"
                        },
                        {
                            buttonClickScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 18      */ bc:Push(0),
                                    /*   1: 28      */ bc:CallGlobal(0),
                                    /*   2: 24      */ bc:PushConst(4),
                                    /*   3: C1      */ bc:Subtract(),
                                    /*   4: 19      */ bc:Push(1),
                                    /*   5: 29      */ bc:CallGlobal(1),
                                    /*   6: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'Time,
                                    'SetTime
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            text: "Jump -1 Minute",
                            viewBounds: {
                                left: 18,
                                top: 192,
                                right: 102,
                                bottom: 212
                            },
                            _proto: @226,
                            debug: "jumpBackMinute"
                        },
                        {
                            buttonClickScript: {
                                class: $\s0003,
                                instructions: MakeBinaryFromBC( [
                                    instructions:
                                    /*   0: 18      */ bc:Push(0),
                                    /*   1: 28      */ bc:CallGlobal(0),
                                    /*   2: 24      */ bc:PushConst(4),
                                    /*   3: C0      */ bc:Add(),
                                    /*   4: 19      */ bc:Push(1),
                                    /*   5: 29      */ bc:CallGlobal(1),
                                    /*   6: 02      */ bc:Ret()
                                ] ),
                                literals: [
                                    literals:
                                    'Time,
                                    'SetTime
                                ],
                                argFrame: NIL,
                                numArgs: 0,
                                DebuggerInfo: NIL
                            },
                            text: "Jump 1 Minute",
                            viewBounds: {
                                left: 122,
                                top: 192,
                                right: 206,
                                bottom: 212
                            },
                            _proto: @226,
                            debug: "jumpForwardMinute"
                        }
                    ],
                    AlarmsEnabled: {
                        class: $\s0003,
                        instructions: MakeBinaryFromBC( [
                            instructions:
                            /*   0: 27 001A */ bc:PushConst(26),
                            /*   3: 02      */ bc:Ret()
                        ] ),
                        literals: NIL,
                        argFrame: NIL,
                        numArgs: 0,
                        DebuggerInfo: NIL
                    },
                    PeriodicAlarm: {
                        class: $\s0003,
                        instructions: MakeBinaryFromBC( [
                            instructions:
                            /*   0: 18      */ bc:Push(0),
                            /*   1: 19      */ bc:Push(1),
                            /*   2: 29      */ bc:CallGlobal(1),
                            /*   3: 00      */ bc:Pop(),
                            /*   4: 7B      */ bc:GetVar(3),
                            /*   5: 1A      */ bc:Push(2),
                            /*   6: 29      */ bc:CallGlobal(1),
                            /*   7: 00      */ bc:Pop(),
                            /*   8: 03      */ bc:PushSelf(),
                            /*   9: 1B      */ bc:Push(3),
                            /*  10: 29      */ bc:CallGlobal(1),
                            /*  11: C5      */ bc:LNot(),
                            /*  12: 6F 0013 */ bc:BranchIfFalse(19),
                            /*  15: 03      */ bc:PushSelf(),
                            /*  16: 1C      */ bc:Push(4),
                            /*  17: 38      */ bc:Send(0),
                            /*  18: 00      */ bc:Pop(),
                            /*  19: 03      */ bc:PushSelf(),
                            /*  20: 1D      */ bc:Push(5),
                            /*  21: 38      */ bc:Send(0),
                            /*  22: 00      */ bc:Pop(),
                            /*  23: 03      */ bc:PushSelf(),
                            /*  24: 1D      */ bc:Push(5),
                            /*  25: 38      */ bc:Send(0),
                            /*  26: 00      */ bc:Pop(),
                            /*  27: 03      */ bc:PushSelf(),
                            /*  28: 1D      */ bc:Push(5),
                            /*  29: 38      */ bc:Send(0),
                            /*  30: 00      */ bc:Pop(),
                            /*  31: 76      */ bc:FindVar(6),
                            /*  32: 1F 0007 */ bc:Push(7),
                            /*  35: 1F 0008 */ bc:Push(8),
                            /*  38: 1F 0009 */ bc:Push(9),
                            /*  41: 1F 000A */ bc:Push(10),
                            /*  44: 28      */ bc:CallGlobal(0),
                            /*  45: 1F 000B */ bc:Push(11),
                            /*  48: 29      */ bc:CallGlobal(1),
                            /*  49: 1F 000C */ bc:Push(12),
                            /*  52: 8B      */ bc:MakeArray(3),
                            /*  53: C7 0016 */ bc:Stringer(),
                            /*  56: 1F 000D */ bc:Push(13),
                            /*  59: 2B      */ bc:CallGlobal(3),
                            /*  60: 02      */ bc:Ret()
                        ] ),
                        literals: [
                            literals:
                            "PeriodicElements Alarm called: ",
                            'Write,
                            'Print,
                            'Visible,
                            'Open,
                            'SysBeep,
                            'lastReported,
                            'text,
                            "Last Alarm:",
                            " ",
                            'Time,
                            'DateNTime,
                            'array,
                            'SetValue
                        ],
                        argFrame: NIL,
                        numArgs: 1,
                        DebuggerInfo: [
                            dbg1:
                            0,
                            'alarm
                        ]
                    },
                    myEditor: NIL,
                    viewQuitScript: {
                        class: $\s0003,
                        instructions: MakeBinaryFromBC( [
                            instructions:
                            /*   0: 70      */ bc:FindVar(0),
                            /*   1: 6F 000A */ bc:BranchIfFalse(10),
                            /*   4: 70      */ bc:FindVar(0),
                            /*   5: 19      */ bc:Push(1),
                            /*   6: 38      */ bc:Send(0),
                            /*   7: 00      */ bc:Pop(),
                            /*   8: 22      */ bc:PushConst(2),
                            /*   9: A8      */ bc:FindAndSetVar(0),
                            /*  10: 1A      */ bc:Push(2),
                            /*  11: 50      */ bc:ResendIfDef(0),
                            /*  12: 02      */ bc:Ret()
                        ] ),
                        literals: [
                            literals:
                            'myEditor,
                            'Close,
                            'viewQuitScript
                        ],
                        argFrame: NIL,
                        numArgs: 0,
                        DebuggerInfo: NIL
                    },
                    _proto: @157,
                    debug: "myapp",
                    lastReported: NIL,
                    stepAllocateContext: [
                        'lastReported,
                        ref00734501
                    ],
                    appSymbol: '|PeriodicElements:PIEDTS|
                },
                installScript: {
                    class: $\s0003,
                    instructions: MakeBinaryFromBC( [
                        instructions:
                        /*   0: 20      */ bc:PushConst(0),
                        /*   1: A4      */ bc:SetVar(4),
                        /*   2: 70      */ bc:FindVar(0),
                        /*   3: 19      */ bc:Push(1),
                        /*   4: 91      */ bc:GetPath(1),
                        /*   5: A5      */ bc:SetVar(5),
                        /*   6: 7D      */ bc:GetVar(5),
                        /*   7: 1A      */ bc:Push(2),
                        /*   8: 29      */ bc:CallGlobal(1),
                        /*   9: 6F 0049 */ bc:BranchIfFalse(73),
                        /*  12: 7D      */ bc:GetVar(5),
                        /*  13: 22      */ bc:PushConst(2),
                        /*  14: C7 0011 */ bc:NewIter(),
                        /*  17: A7 0007 */ bc:SetVar(7),
                        /*  20: 5F 003C */ bc:Branch(60),
                        /*  23: 7F 0007 */ bc:GetVar(7),
                        /*  26: 24      */ bc:PushConst(4),
                        /*  27: C2      */ bc:ARef(),
                        /*  28: A6      */ bc:SetVar(6),
                        /*  29: 7E      */ bc:GetVar(6),
                        /*  30: 1B      */ bc:Push(3),
                        /*  31: 91      */ bc:GetPath(1),
                        /*  32: 7B      */ bc:GetVar(3),
                        /*  33: 1B      */ bc:Push(3),
                        /*  34: 91      */ bc:GetPath(1),
                        /*  35: C4      */ bc:Equals(),
                        /*  36: 6F 0038 */ bc:BranchIfFalse(56),
                        /*  39: 27 000C */ bc:PushConst(12),
                        /*  42: 1C      */ bc:Push(4),
                        /*  43: 1D      */ bc:Push(5),
                        /*  44: 1E      */ bc:Push(6),
                        /*  45: 28      */ bc:CallGlobal(0),
                        /*  46: 1F 0007 */ bc:Push(7),
                        /*  49: 3B      */ bc:Send(3),
                        /*  50: 00      */ bc:Pop(),
                        /*  51: 22      */ bc:PushConst(2),
                        /*  52: 5F 0044 */ bc:Branch(68),
                        /*  55: 00      */ bc:Pop(),
                        /*  56: 7F 0007 */ bc:GetVar(7),
                        /*  59: 05      */ bc:IterNext(),
                        /*  60: 7F 0007 */ bc:GetVar(7),
                        /*  63: 06      */ bc:IterDone(),
                        /*  64: 6F 0017 */ bc:BranchIfFalse(23),
                        /*  67: 22      */ bc:PushConst(2),
                        /*  68: 22      */ bc:PushConst(2),
                        /*  69: A7 0007 */ bc:SetVar(7),
                        /*  72: 00      */ bc:Pop(),
                        /*  73: 7B      */ bc:GetVar(3),
                        /*  74: 1F 0008 */ bc:Push(8),
                        /*  77: 1F 0009 */ bc:Push(9),
                        /*  80: 2A      */ bc:CallGlobal(2),
                        /*  81: 6F 0061 */ bc:BranchIfFalse(97),
                        /*  84: 7B      */ bc:GetVar(3),
                        /*  85: 7B      */ bc:GetVar(3),
                        /*  86: 1F 0008 */ bc:Push(8),
                        /*  89: 39      */ bc:Send(1),
                        /*  90: 00      */ bc:Pop(),
                        /*  91: 7B      */ bc:GetVar(3),
                        /*  92: 1F 0008 */ bc:Push(8),
                        /*  95: 22      */ bc:PushConst(2),
                        /*  96: 98      */ bc:SetPath(0),
                        /*  97: 7B      */ bc:GetVar(3),
                        /*  98: 1F 000A */ bc:Push(10),
                        /* 101: 22      */ bc:PushConst(2),
                        /* 102: 99      */ bc:SetPath(1),
                        /* 103: 02      */ bc:Ret()
                    ] ),
                    literals: [
                        literals:
                        'vars,
                        'extras,
                        'IsArray,
                        'app,
                        "Extras Drawer",
                        "The application you just installed conflicts with another application. Please contact the application vendor for an updated version.",
                        'GetRoot,
                        'Notify,
                        'devInstallScript,
                        'HasSlot,
                        'installScript
                    ],
                    argFrame: NIL,
                    numArgs: 262145,
                    DebuggerInfo: [
                        dbg1:
                        0,
                        'p,
                        'i,
                        'extras,
                        'one,
                        '|one\|iter|
                    ]
                },
                removeScript: {
                    class: $\s0003,
                    instructions: MakeBinaryFromBC( [
                        instructions:
                        /*   0: 7B      */ bc:GetVar(3),
                        /*   1: 18      */ bc:Push(0),
                        /*   2: 19      */ bc:Push(1),
                        /*   3: 2A      */ bc:CallGlobal(2),
                        /*   4: 6F 000E */ bc:BranchIfFalse(14),
                        /*   7: 7B      */ bc:GetVar(3),
                        /*   8: 7B      */ bc:GetVar(3),
                        /*   9: 18      */ bc:Push(0),
                        /*  10: 39      */ bc:Send(1),
                        /*  11: 5F 000F */ bc:Branch(15),
                        /*  14: 22      */ bc:PushConst(2),
                        /*  15: 02      */ bc:Ret()
                    ] ),
                    literals: [
                        literals:
                        'devRemoveScript,
                        'HasSlot
                    ],
                    argFrame: NIL,
                    numArgs: 1,
                    DebuggerInfo: [
                        dbg1:
                        0,
                        'p
                    ]
                }
            }
        }
    ]
}
;

//p("read...");
//p(src);
//p("read...");

pkg := MakePkg(src);
SaveBinary(pkg, "/Users/matt/dev/Newton/NewtonDev/NewtonDev.1/Sample Code/System Services/PeriodicElements-1/PeriodicElements1.pkg");

newSrc := ReadPkg(pkg);
p(newSrc);

p("Done.");

